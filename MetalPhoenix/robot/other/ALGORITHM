############################################

EVENT= [ N, S, E, O ]

PLIST= [ S, N, O, E ]

STATE= S0, [ S1, S2, S3, S4, S5, S4, S6, S7, S8, S9, S8, S7, S6, S4, S3, S2, S10 ]

TRAJECTORY= [ N, O, S, O, N, S, O, N, E, N, S, O, S, E, E, N, N ]

ALL_EVENTS= [ N, O, [N, S], [N, O], S, O, N, E, N, S, O, S, E, E, N, N ]


?? NEGATE_EVENTS= [ S, S, O, S, E, E, N ] ??


°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

S5 attr: { dead_end=true }
S9 attr: { dead_end=true }
S8 attr: { dead_end=true }
S7 attr: { dead_end=true }
S6 attr: { dead_end=true }
S4 attr: { dead_end=true }
S3 attr: { dead_end=true }

°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

##############################################



################ DEF #########################

STATE:
    -attr:
        dead_end: bool
        final: bool
        begin: bool

    -neigh:           //?
        STATES: list  //?


                R
                |
                |
               S1
                |
                |
               S2
               /\
              /  \
             S3   S10


TREE:
    TREE() { curr = new NODE(nullptr); }



    link(NODE n, WEIGHT w)
    {
        curr->n1 = n;
        curr->weightL = w;

        curr = n;
    }

    setAttr(...) {...}

    NODE *curr;

NODE:
    NODE(NODE *parent, String name = "root") { parent = parent; name = name; }
    String name;


    NODE *parent
    NODE *n1
    NODE *n2
    NODE *n3

    weightL: Compass
    weightC: Compass
    weightR: Compass


TREE t;
t.link(new NODE("S1"), N );
t.link(new NODE("S2"), O );
t.link(new NODE("S3"), S );

t.sA(dead_end);
t.reverse();

t.link(new NODE("S10"), N );














