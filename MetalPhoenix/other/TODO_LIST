

########################################################################################################################

1°) Intelligenza

2°) reformat code

8°) documentation

9°) slide


TO DO:
1) Gestire meglio comandi per la ROTAZIONE


########################################################################################################################


Intelligenza:

intelligence = low/mid/high

low: prende direttamente la lista di priorità nel file di conf
mid: in modo casuale (distribuzione uniforme?) sceglie l'ordine della lista di priorità sia all'inizio sia durante l'esplorazione
high: Metodo che in base allo storico dei risultati prodotti nell'esplorazione di diversi labirinti
      sceglie la lista di priorità migliore che permette di esplorare il labirinto:
      i) con minor tempo possibile
      ii) con un numero di nodi più piccolo possibile
      iii) con un numero di nodi dead end più piccolo possibile

Maze Dataset (information of the mazes are saved in a single file):
Maze name = Maze+number+prioritylist (section of the file)
Priority list chosen
Solving Time
Number of nodes
Number of dead end nodes

# self.priority_list = [Compass.NORD, Compass.OVEST, Compass.EST, Compass.SUD]
# self.priority_list = [Compass.SUD, Compass.OVEST, Compass.EST, Compass.NORD]
# self.priority_list = [Compass.NORD, Compass.OVEST, Compass.SUD, Compass.EST]
# self.priority_list = [Compass.NORD, Compass.SUD, Compass.OVEST, Compass.EST]
# self.priority_list = [Compass.NORD, Compass.SUD, Compass.EST, Compass.OVEST]
# self.priority_list = [Compass.NORD, Compass.EST, Compass.SUD, Compass.OVEST]
# self.priority_list = [Compass.NORD, Compass.EST, Compass.OVEST, Compass.SUD]